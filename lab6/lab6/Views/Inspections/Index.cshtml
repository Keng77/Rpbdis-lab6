<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Управление Проверками</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
        }

        button {
            margin: 5px;
        }
    </style>
</head>
<body>
    <h1>Управление Проверками</h1>

    <h2>Добавить/Редактировать Проверку</h2>
    <form id="inspectionForm">
        <input type="hidden" id="inspectionId">
        <label for="inspectorId">Инспектор:</label>
        <select id="inspectorId" required></select>
        <br>
        <label for="enterpriseId">Предприятие:</label>
        <select id="enterpriseId" required></select>
        <br>
        <label for="violationTypeId">Тип нарушения:</label>
        <select id="violationTypeId" required></select>
        <br>
        <label for="inspectionDate">Дата проверки:</label>
        <input type="date" id="inspectionDate" required>
        <br>
        <label for="protocolNumber">Номер протокола:</label>
        <input type="text" id="protocolNumber" maxlength="50">
        <br>
        <label for="responsiblePerson">Ответственный:</label>
        <input type="text" id="responsiblePerson" maxlength="100">
        <br>
        <label for="penaltyAmount">Задолженность:</label>
        <input type="number" id="penaltyAmount" required step="0.01">
        <br>
        <label for="paymentDeadline">Дедлайн оплаты:</label>
        <input type="date" id="paymentDeadline" required>
        <br>
        <label for="correctionDeadline">Дедлайн исправления:</label>
        <input type="date" id="correctionDeadline" required>
        <br>
        <label for="paymentStatus">Статус оплаты:</label>
        <input type="text" id="paymentStatus" required>
        <br>
        <label for="correctionStatus">Статус исправления:</label>
        <input type="text" id="correctionStatus" required>
        <br>
        <button type="submit">Сохранить</button>
    </form>

    <h2>Список Проверок</h2>
    <table id="inspectionsTable">
        <thead>
            <tr>
                <th>ID</th>
                <th>Инспектор</th>
                <th>Предприятие</th>
                <th>Тип нарушения</th>
                <th>Дата проверки</th>
                <th>Номер протокола</th>
                <th>Ответственный</th>
                <th>Задолженность</th>
                <th>Дедлайн оплаты</th>
                <th>Дедлайн исправления</th>
                <th>Статус оплаты</th>
                <th>Статус исправления</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            <!-- Данные будут загружены динамически -->
        </tbody>
    </table>

    <script>
        let isEditing = false; // Переменная для отслеживания режима редактирования

        document.addEventListener('DOMContentLoaded', () => {
            loadSelectOptions();
            getInspections();
        });

        const loadSelectOptions = () => {
            // Загрузка инспекторов
            fetch('/api/inspectorsapi')
                .then(response => response.json())
                .then(data => {
                    const inspectorSelect = document.getElementById('inspectorId');
                    data.forEach(inspector => {
                        const option = document.createElement('option');
                        option.value = inspector.inspectorId;
                        option.textContent = inspector.fullName;
                        inspectorSelect.appendChild(option);
                    });
                });

            // Загрузка предприятий
            fetch('/api/enterprisesapi')
                .then(response => response.json())
                .then(data => {
                    const enterpriseSelect = document.getElementById('enterpriseId');
                    data.forEach(enterprise => {
                        const option = document.createElement('option');
                        option.value = enterprise.enterpriseId;
                        option.textContent = enterprise.name;
                        enterpriseSelect.appendChild(option);
                    });
                });

            // Загрузка типов нарушений
            fetch('/api/violationtypesapi')
                .then(response => response.json())
                .then(data => {
                    const violationTypeSelect = document.getElementById('violationTypeId');
                    data.forEach(violationType => {
                        const option = document.createElement('option');
                        option.value = violationType.violationTypeId;
                        option.textContent = violationType.name;
                        violationTypeSelect.appendChild(option);
                    });
                });
        };

        const getInspections = () => {
            fetch('/api/inspectionsapi')
                .then(response => response.json())
                .then(data => {
                    const tableBody = document.getElementById('inspectionsTable').querySelector('tbody');
                    tableBody.innerHTML = ''; // Очистить таблицу перед добавлением новых строк
                    data.forEach(inspection => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${inspection.inspectionId}</td>
                            <td>${inspection.inspector ? inspection.inspector.fullName : ''}</td>
                            <td>${inspection.enterprise ? inspection.enterprise.name : ''}</td>
                            <td>${inspection.violationType ? inspection.violationType.name : ''}</td>
                            <td>${inspection.inspectionDate}</td>
                            <td>${inspection.protocolNumber}</td>
                            <td>${inspection.responsiblePerson}</td>
                            <td>${inspection.penaltyAmount}</td>
                            <td>${inspection.paymentDeadline}</td>
                            <td>${inspection.correctionDeadline}</td>
                            <td>${inspection.paymentStatus}</td>
                            <td>${inspection.correctionStatus}</td>
                            <td>
                                <button onclick="editInspection(${inspection.inspectionId})">Редактировать</button>
                                <button onclick="deleteInspection(${inspection.inspectionId})">Удалить</button>
                            </td>
                        `;
                        tableBody.appendChild(row);
                    });
                });
        };

        document.getElementById('inspectionForm').addEventListener('submit', (event) => {
            event.preventDefault();
            const inspectionId = document.getElementById('inspectionId').value;
            if (isEditing) {
                updateInspection(inspectionId);
            } else {
                createInspection();
            }
        });

        const createInspection = () => {
            const inspectionData = {
                inspectorId: document.getElementById('inspectorId').value,
                enterpriseId: document.getElementById('enterpriseId').value,
                violationTypeId: document.getElementById('violationTypeId').value,
                inspectionDate: document.getElementById('inspectionDate').value,
                protocolNumber: document.getElementById('protocolNumber').value,
                responsiblePerson: document.getElementById('responsiblePerson').value,
                penaltyAmount: parseFloat(document.getElementById('penaltyAmount').value),
                paymentDeadline: document.getElementById('paymentDeadline').value,
                correctionDeadline: document.getElementById('correctionDeadline').value,
                paymentStatus: document.getElementById('paymentStatus').value,
                correctionStatus: document.getElementById('correctionStatus').value
            };

            fetch('/api/inspectionsapi', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(inspectionData)
            })
            .then(response => response.json())
            .then(() => {
                getInspections();
                resetForm();
            })
            .catch(error => console.error('Ошибка при создании проверки:', error));
        };

        const updateInspection = (inspectionId) => {
            const inspectionData = {
                inspectionId: inspectionId,
                inspectorId: document.getElementById('inspectorId').value,
                enterpriseId: document.getElementById('enterpriseId').value,
                violationTypeId: document.getElementById('violationTypeId').value,
                inspectionDate: document.getElementById('inspectionDate').value,
                protocolNumber: document.getElementById('protocolNumber').value,
                responsiblePerson: document.getElementById('responsiblePerson').value,
                penaltyAmount: parseFloat(document.getElementById('penaltyAmount').value),
                paymentDeadline: document.getElementById('paymentDeadline').value,
                correctionDeadline: document.getElementById('correctionDeadline').value,
                paymentStatus: document.getElementById('paymentStatus').value,
                correctionStatus: document.getElementById('correctionStatus').value
            };

            fetch(`/api/inspectionsapi/${inspectionId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(inspectionData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Ошибка: ${response.statusText}`);
                }
                getInspections();
                resetForm();
            })
            .catch(error => console.error('Ошибка при обновлении проверки:', error));
        };

        const editInspection = (inspectionId) => {
            fetch(`/api/inspectionsapi/${inspectionId}`)
                .then(response => response.json())
                .then(inspection => {
                    document.getElementById('inspectionId').value = inspection.inspectionId;
                    document.getElementById('inspectorId').value = inspection.inspectorId;
                    document.getElementById('enterpriseId').value = inspection.enterpriseId;
                    document.getElementById('violationTypeId').value = inspection.violationTypeId;
                    document.getElementById('inspectionDate').value = inspection.inspectionDate;
                    document.getElementById('protocolNumber').value = inspection.protocolNumber;
                    document.getElementById('responsiblePerson').value = inspection.responsiblePerson;
                    document.getElementById('penaltyAmount').value = inspection.penaltyAmount;
                    document.getElementById('paymentDeadline').value = inspection.paymentDeadline;
                    document.getElementById('correctionDeadline').value = inspection.correctionDeadline;
                    document.getElementById('paymentStatus').value = inspection.paymentStatus;
                    document.getElementById('correctionStatus').value = inspection.correctionStatus;

                    isEditing = true; // Установите флаг редактирования
                });
        };

        const deleteInspection = (inspectionId) => {
            fetch(`/api/inspectionsapi/${inspectionId}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (response.ok) {
                    getInspections();
                } else {
                    console.error('Ошибка при удалении проверки:', response.statusText);
                }
            });
        };

        const resetForm = () => {
            document.getElementById('inspectionForm').reset();
            document.getElementById('inspectionId').value = ''; // Сбросить ID
            isEditing = false; // Сбросить флаг редактирования
        };
    </script>
</body>
</html>